# Airflow Base Configuration
airflow:
  image:
    repository: apache/airflow
    tag: "2.6.0"
    pullPolicy: IfNotPresent

  config:
    AIRFLOW__CORE__EXECUTOR: "CeleryExecutor"
    AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://airflow:db-password@pgbouncer-service:5432/airflow"
    AIRFLOW__OTEL__ENABLED: "True"
    AIRFLOW__OTEL__EXPORTER: "OTLP"
    AIRFLOW__OTEL__OTLP_ENDPOINT: "http://otel-collector:4317"
    AIRFLOW__OTEL__INSTRUMENTATION: "True"
    AIRFLOW__OTEL__TRACES_EXPORTER: "otlp"
    AIRFLOW__CORE__FERNET_KEY: "test_fernet_key_1234567890abcdefg"
    AIRFLOW__WEBSERVER__SECRET_KEY: "test_web_server_key_abcdefg"

# Celery Executor Configuration
executor:
  celery:
    worker:
      replicas: 3
    broker_url: "redis://:redis-password@redis-service:6379/0"
    result_backend: "db+postgresql://airflow:db-password@pgbouncer-service:5432/airflow"

# OpenTelemetry Collector Configuration
otelCollector:
  enabled: true
  image:
    repository: otel/opentelemetry-collector
    tag: latest
  config:
    receivers:
      otlp:
        protocols:
          http:
          grpc:
    exporters:
      logging:
      otlp:
        endpoint: "otel-collector:4317"
    service:
      pipelines:
        traces:
          receivers: [otlp]
          exporters: [logging, otlp]

# PgBouncer Configuration
pgbouncer:
  enabled: true
  image:
    repository: edoburu/pgbouncer
    tag: latest
    pullPolicy: IfNotPresent
  config:
    databases:
      airflow: "host=postgresql port=5432 dbname=airflow user=airflow password=db-password"
    pgbouncer:
      listen_port: 5432
      max_client_conn: 100
      default_pool_size: 20
      min_pool_size: 10
      reserve_pool_size: 5
      reserve_pool_timeout: 5
      auth_type: md5
      ignore_startup_parameters: extra_float_digits

  auth:
    enabled: true
    user: airflow
    password: "db-password"

  service:
    type: ClusterIP
    port: 5432

# Redis Configurations (for Celery broker)
redis:
  enabled: true
  
  # Specify your Redis image
  image:
    repository: redis
    tag: "latest"
    pullPolicy: IfNotPresent

  # Custom Redis configuration
  configmap:
    redis.conf: |
      # Custom Redis Configuration
      bind 0.0.0.0
      requirepass your_secure_password
      maxmemory 256mb
      maxmemory-policy allkeys-lru
      # Add other configurations as needed

  # Volume and volumeMounts to use the custom config
  extraVolumeMounts:
    - name: redis-config
      mountPath: /usr/local/etc/redis/redis.conf
      subPath: redis.conf

  extraVolumes:
    - name: redis-config
      configMap:
        name: redis-config
  
  # Pass the custom configuration file as an argument to Redis
  args:
    - "/usr/local/etc/redis/redis.conf"

  # Security context for Redis
  securityContext:
    fsGroup: 65534
    runAsUser: 1000

  # Liveness and readiness probes
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10

  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10

# PostgreSQL Database (for Airflow metadata)
postgresql:
  enabled: true
  auth:
    postgresPassword: "db-password"
    username: airflow
    password: "db-password"
    database: airflow
  persistence:
    enabled: true
    size: 8Gi

# Webserver Configuration
web:
  replicas: 1
  service:
    type: LoadBalancer

# Scheduler Configuration
scheduler:
  replicas: 1
  service:
    type: ClusterIP

# Ingress Settings (Optional)
ingress:
  enabled: true
  web:
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - airflow.example.com
    paths: ["/"]
    tls:
      - secretName: airflow-tls-secret
        hosts:
          - airflow.example.com

# Persistence Configuration for DAGs (Optional)
dags:
  persistence:
    enabled: true
    size: 5Gi

# Airflow Logs (Optional)
logs:
  persistence:
    enabled: true
    size: 5Gi

# Airflow Workers (for CeleryExecutor)
workers:
  replicas: 3
